import "Srl/Console";
import "Srl/Math";
import "Srl/Array.alusus";
import "Srl/String.alusus";
use Srl;
module Base64{
    func convertTo1ByteBinary(input: String): Array[int] {
        def binaryArray: Array[int];
        def binaryVal: array[int, 8];
        def i: int = 0;
        def j: int = 0;
        def intVal: int = 0;
        def padding: int = 0;
        for i = 0, i < input.getLength(), i += 1 {
            for j = 0, j < 8, j++
                binaryVal(j) = 0;
            intVal = input(i)~cast[int];
            j = 7;
            while intVal > 0 {
                binaryVal(j) = intVal%2;
                intVal = intVal / 2;
                j -= 1;
            }
            j -= 1;
            while j >= 0 {
                binaryVal(j) = 0;
                j = j - 1;
            }
            for j = 0, j < 8, j++ {
                binaryArray.add(binaryVal(j));
            }
        }
        if binaryArray.getLength()%3 != 0 {
            if (binaryArray.getLength() + 8)%3 == 0 {
                for j = 0, j < 8, j++ {
                    binaryArray.add(0);
                }

                padding = 1;
            }
            else {
                for j = 0, j < 16, j++ {
                    binaryArray.add(0);
                }

                padding = 2;
            }
        }
        binaryArray.add(padding);
        return binaryArray;
    }

    func convertTo6BitsBinary(input: String): Array[int] {
        def binaryArray2: Array[int];
        def binaryVal2: array[int, 6];
        def i: int = 0;
        def j: int = 0;
        def intVal: int = 0;
        def padding: int = 0;
        for i = 0, i < input.getLength(), i += 1 {
            for j = 0, j < 6, j++
                binaryVal2(j) = 0;
            if input(i)~cast[int] >='A'~cast[int] and input(i)~cast[int] <='Z'~cast[int]
                {intVal = input(i)~cast[int] - 'A'~cast[int];}
            else if input(i)~cast[int] >= 'a'~cast[int] and input(i)~cast[int] <= 'z'~cast[int]
                {intVal = input(i)~cast[int] - 'a'~cast[int] + 26;}
            else if input(i)~cast[int] >= '0'~cast[int] and input(i)~cast[int] <= '9'~cast[int]
                {intVal = input(i)~cast[int] - '0'~cast[int] + 52;}
            else if input(i) == '+'
                {intVal = 62;}
            else if input(i) == '/'
                {intVal = 63;}
            j = 5;
            while intVal > 0 {
                binaryVal2(j) = intVal%2;
                intVal = intVal / 2;
                j -= 1;
            }
            j -= 1;
            while j >= 0 {
                binaryVal2(j) = 0;
                j = j - 1;
            }
            for j = 0, j < 6, j++ {
                binaryArray2.add(binaryVal2(j));
            }
        }
        return binaryArray2;
    }



    func convertToDecimal(input: int): int {
        def intVal: int = 0;
        def base: int = 1;
        def lastDigit: int;
        while input > 0 {
            lastDigit = input%10;
            input = input / 10;
            intVal += (lastDigit * base);
            base *= 2;
        }
        return intVal;
    }

    func convertToBinary(input: int):  {
        def intVal: int = 0;
        def base: int = 1;
        def lastDigit: int;
        while input > 0 {
            lastDigit = input%10;
            input = input / 10;
            intVal += (lastDigit * base);
            base *= 2;
        }
        return intVal;
    }

    func encoder(input: String): String {
        def i: int = 0;
        def j: int = 0;
        def z: int = 5;
        def binaryArray: Array[int];
        def intVal: int = 0;
        def padding: int = 0;
        def output: String = "";
        def numberOfChar: int = 0;
        def binaryNumber: int = 0;
        def c: int = 0;
        binaryArray = convertTo1ByteBinary(input);
        padding = binaryArray(binaryArray.getLength() - 1);
        binaryArray.remove(binaryArray.getLength() - 1);
        numberOfChar = binaryArray.getLength() / 6;
        for j = 0, j < numberOfChar, j++ {
            for i = j * 6, i < (j + 1) * 6, i++ {
                binaryNumber = binaryNumber + binaryArray(i) * Math.pow(10~cast[Float], z~cast[Float]);
                z -= 1;
            }
            z = 5;
            intVal = convertToDecimal(binaryNumber);
            binaryNumber = 0;
            if intVal >= 0 and intVal <= 25 {
                output = output + ('A'~cast[int] + intVal)~cast[char];
            } else if intVal >= 26 and intVal <= 51 {
                output = output + ('a'~cast[int] + intVal - 26)~cast[char];
            } else if intVal >= 52 and intVal <= 61 {
                output = output + ('0'~cast[int] + intVal - 52)~cast[char];
            } else {
                if intVal == 62 {output = output + String("+");}
                else {output = output + String("/");}
            }
        }
        if padding == 1 {
            output = output.slice(0, output.getLength() - 1);
            output = output + String("=")
        } else if padding == 2 {
            output = output.slice(0, output.getLength() - 2);
            output = output + String("==");
        }
        return output;
    }

    func decoder(input: String): String {
        def i: int = 0;
        def j: int = 0;
        def z: int = 7;
        def binaryArray2: Array[int];
        def intVal: int = 0;
        def padding: int = 0;
        def output: String = "";
        def numberOfChar: int = 0;
        def binaryNumber: int = 0;
        def c: int = 0;
        binaryArray2 = convertTo6BitsBinary(input);


        numberOfChar = binaryArray2.getLength() / 8;
        for j = 0, j < numberOfChar, j++ {
            for i = j * 8, i < (j + 1) * 8, i++ {
                binaryNumber = binaryNumber + binaryArray2(i) * Math.pow(10~cast[Float], z~cast[Float]);
                z -= 1;
            }
            z = 7;
            intVal = convertToDecimal(binaryNumber);
            binaryNumber = 0;
            output = output + intVal~cast[char];
        }
        return output;
    }
}
