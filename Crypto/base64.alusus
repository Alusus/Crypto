
@merge module Crypto {
    func encodeBase64(input: String): String {
        def output: String;
        def padding: int = 0;
        def i: Int;
        for i = 0, i < input.getLength(), i += 3 {
            def val: Int = 0;
            def count: Int = 0;
            def j: Int;
            for j = i, j < input.getLength() and j <= i + 2, j++ {
                val = val << 8;
                val = val | input(j);
                count++;
            }
            def numberOfBits: Int = count * 8;
            padding = numberOfBits%3;
            while numberOfBits != 0 {
                def index: int = 0;
                if numberOfBits >= 6 {
                    def temp: Int = numberOfBits - 6;
                    index = (val >> temp) & 63;
                    numberOfBits -= 6;
                } else {
                    def temp: Int = 6 - numberOfBits;
                    index = (val << temp) & 63;
                    numberOfBits = 0;
                }
                if index >= 0 and index <= 25 {
                    output = output + ('A'~cast[int] + index)~cast[char];
                } else if index >= 26 and index <= 51 {
                    output = output + ('a'~cast[int] + index - 26)~cast[char];
                } else if index >= 52 and index <= 61 {
                    output = output + ('0'~cast[int] + index - 52)~cast[char];
                } else {
                    if index == 62 {
                        output = output + String("+");
                    } else {
                        output = output + String("/");
                    }
                }
            }
        }
        while padding-- > 0 output += "=";
        return output;
    }

    func decodeBase64(input: String): String {
        def output: String;
        def i: Int;
        for i = 0, i < input.getLength(), i += 4 {
            def num: Int = 0;
            def countBits: Int = 0;
            def j: Int;
            for j = 0, j < 4, j++ {
                if input(i + j) != '=' {
                    num = num << 6;
                    countBits += 6;
                }
                if (input(i + j) >= 'A' and input(i + j) <= 'Z') {
                    num = num | (input(i + j) - 'A');
                } else if input(i + j) >= 'a' and input(i + j) <= 'z' {
                    num = num | (input(i + j) - 'a' + 26);
                } else if input(i + j) >= '0' and input(i + j) <= '9' {
                    num = num | (input(i + j) - '0' + 52);
                } else if input(i + j) == '+' {
                    num = num | 62;
                } else if input(i + j) == '/' {
                    num = num | 63;
                } else {
                    num = num >> 2;
                    countBits -= 2;
                }
            }
            while countBits != 0 {
                countBits -= 8;
                output = output + ((num >> countBits) & 255)~cast[char];
            }
        }
        return output;
    }
}

